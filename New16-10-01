
pipeline {
  agent {
    label "Java"
  }
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
    }
    
    stage('jacoco') {
      steps {
        jacoco()
      }
    }
    
    stage('SonarQube analysis') {
      steps {
        script {
          def scannerHome = tool 'sonarqubescanner'
          withSonarQubeEnv('sonarqube') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
              -Dsonar.projectKey=javawebapp \
              -Dsonar.projectName=javawebapp \
              -Dsonar.projectVersion=1.0 \
              -Dsonar.java.binaries='target/classes'
            """
          }
        }
      }
    }
    /*
    stage("Sonar Quality Gate Check") {
      steps {
        timeout(time: 1, unit: 'MINUTES') {
          script {
            def qualityGate = waitForQualityGate()
            if (qualityGate.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
            }
          }
        }
      }
    }
    */
    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader(
          artifacts: [[
            artifactId: 'SimpleWebApplication', 
            classifier: '', 
            file: 'target/SimpleWebApplication.war', 
            type: 'war'
          ]], 
          credentialsId: 'nexus-jenkins', 
          groupId: 'com.maven', 
          nexusUrl: '15.206.127.120:8081/', 
          nexusVersion: 'nexus3', 
          protocol: 'http', 
          repository: 'maven-snapshots', 
          version: '1.0.0-SNAPSHOT'
        )
      }
    }
  stage('Download Latest WAR from Nexus') {
    agent {
        label "tomcat1"
    }
    steps {
	script {
                    //  Download the WAR from Nexus
                    sh """
                    curl -u admin:admin -O http://15.206.127.120:8081/repository/snapshotnew/com/maven/SimpleWebApplication/1.0.0-SNAPSHOT/maven-metadata.xml
		    pwd
		    ls -al
      		    """
      		    def value = sh(script: "grep '<value>' maven-metadata.xml | sed -e 's/.*<value>\\(.*\\)<\\/value>/\\1/'", returnStdout: true).trim()
        	    echo "Latest Artifact Version: $value"
		
                }
         }
     }
  }
}
